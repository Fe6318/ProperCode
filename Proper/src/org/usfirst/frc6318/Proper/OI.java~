// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6318.Proper;

import org.usfirst.frc6318.Proper.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc6318.Proper.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton openGrabberA;
    public JoystickButton closeGrabberB;
    public JoystickButton moveWristUpRB;
    public JoystickButton moveWristDownLB;
    public JoystickButton stopWristRB;
    public JoystickButton stopWristLB;
    public Joystick xBoxController;
    public Joystick logitechController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        logitechController = new Joystick(1);
        
        xBoxController = new Joystick(0);
        
        stopWristLB = new JoystickButton(xBoxController, 1);
        stopWristLB.whenReleased(new StopWrist());
        stopWristRB = new JoystickButton(xBoxController, 6);
        stopWristRB.whenReleased(new StopWrist());
        moveWristDownLB = new JoystickButton(xBoxController, 5);
        moveWristDownLB.whileHeld(new TiltWristDown());
        moveWristUpRB = new JoystickButton(xBoxController, 6);
        moveWristUpRB.whileHeld(new TiltWristUp());
        closeGrabberB = new JoystickButton(xBoxController, 2);
        closeGrabberB.whenPressed(new CloseGrabber());
        openGrabberA = new JoystickButton(xBoxController, 1);
        openGrabberA.whenPressed(new OpenGrabber());


        // SmartDashboard Buttons
        SmartDashboard.putData("Center", new Center());
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("OpenGrabber", new OpenGrabber());
        SmartDashboard.putData("CloseGrabber", new CloseGrabber());
        SmartDashboard.putData("TiltWristUp", new TiltWristUp());
        SmartDashboard.putData("TiltWristDown", new TiltWristDown());
        SmartDashboard.putData("StopWrist", new StopWrist());
        SmartDashboard.putData("SetDriveToControlSticks", new SetDriveToControlSticks());
        SmartDashboard.putData("SetLiftWithTriggers", new SetLiftWithTriggers());
        SmartDashboard.putData("EnableControl", new EnableControl());
        SmartDashboard.putData("DriveForwardForTime: CrossAutoLine", new DriveForwardForTime(2.4));
        SmartDashboard.putData("ResetGyro", new ResetGyro());
        SmartDashboard.putData("Turn: Right", new Turn(90));
        SmartDashboard.putData("Turn: Left", new Turn(-90));
        SmartDashboard.putData("LeftOnSide", new LeftOnSide());
        SmartDashboard.putData("RaiseLift: RaiseFully", new RaiseLift(4));
        SmartDashboard.putData("TiltGrabberDown: TiltFully", new TiltGrabberDown(1.5));
        SmartDashboard.putData("Left", new Left());
        SmartDashboard.putData("RightOnSide", new RightOnSide());
        SmartDashboard.putData("Right", new Right());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getXBoxController() {
        return xBoxController;
    }

    public Joystick getLogitechController() {
        return logitechController;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

